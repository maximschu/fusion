# linux
on windows go to terminal(powershell as admin)

usbipd list
identify lidar < this is not in terminal...please use common sense here

usbipd bind --busid 2-2
usbipd attach --wsl --busid 2-2 
^^^^^^may be diff bus id

open terminal 

export ROS_HOSTNAME=localhost
export ROS_MASTER_URI=http://localhost:11311
roscore
leave open



new terminal
lsusb
ls -l /dev |grep ttyUSB
sudo chmod 666 /dev/ttyUSB0
source devel/setup.bash

export ROS_HOSTNAME=localhost
export ROS_MASTER_URI=http://localhost:11311
roslaunch rplidar_ros view_rplidar.launch


leave running 



3rd terminal
cd lidar_ws
source devel/setup.bash
 cd src
 cd hector_slam
 cd hector_slam_launch
 cd launch
 roslaunch  tutorial.launch


in another window can use 
rostopic echo /scan
^ tpo check if it workeds




# matlab
setenv('ROS_MASTER_URI','http://localhost:11311')
 setenv('ROS_IP','localhost')
rosinit
rostopic info scan
sub = rossubscriber('/scan','DataFormat','struct');
[msg2,status,statustext] = receive(sub,10)

scans = rosReadLidarScan(msg2)
plot(scans) OR USE rosPlot(msg2)



if you want to do numerous frames
setenv('ROS_MASTER_URI','http://localhost:11311')
 setenv('ROS_IP','localhost')
rosinit
rostopic info scan
sub = rossubscriber('/scan','DataFormat','struct');
for i=1:10
    [msg2,status,statustext] = receive(sub,10);

    scans(i) = rosReadLidarScan(msg2);
    pause(1);
end
for i=1:10
    figure();
    plot(scans(i))
end



all tutorials are at:
https://www.youtube.com/watch?v=h16BGFK_V9Q&ab_channel=G%C3%B6khanAtal%C4%B1



matlab slam attempt





maxLidarRange = 8; % Maximum range of your LiDAR sensor in meters
mapResolution = 20; % Resolution of the map (cells per meter)

slamAlg = lidarSLAM(mapResolution, maxLidarRange);
slamAlg.LoopClosureThreshold = 210;  % Adjust based on environment
slamAlg.LoopClosureSearchRadius = 8; % Maximum radius for loop closure

maxIterations = 100; % Adjust based on the number of scans you have

for i = 1:maxIterations
    scanMsg = receive(sub, 10); % Receive each new scan message
    ranges = double(scanMsg.Ranges); % Get the range data

    % Generate angles to match the number of ranges
    numAngles = numel(ranges); % Get the number of range measurements
    angles = linspace(double(scanMsg.AngleMin), double(scanMsg.AngleMax), numAngles);

    % Create the lidarScan object
    scan = lidarScan(ranges, angles);

    % Add the scan to the SLAM algorithm
    [isAccepted, loopClosureInfo, optimizationInfo] = addScan(slamAlg, scan);

    % Optional: Visualize the SLAM process
    show(slamAlg);
    pause(0.01); % Pause briefly for visualization
end


[scans, poses] = scansAndPoses(slamAlg);
map = buildMap(scans, poses, mapResolution, maxLidarRange);
figure;
show(map);
title('Constructed Map');


