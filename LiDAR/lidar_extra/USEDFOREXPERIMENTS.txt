close all;
clear all;
pause(2.5);

% Parameters
maxIterations = 450;
maxLidarRange = 8;
mapResolution = 20; % Resolution of the map (cells per meter)

% ROS Subscriber
sub = rossubscriber('/scan', 'DataFormat', 'struct');

% SLAM Algorithm Configuration
slamAlg = lidarSLAM(mapResolution, maxLidarRange);
slamAlg.LoopClosureThreshold = 210;
slamAlg.LoopClosureSearchRadius = 8;

% Pre-allocate cell arrays for storing data
rawPointsArray = cell(maxIterations, 1);
posesArray = cell(maxIterations, 1);

disp("Start");
disp(['Current time: ', datestr(now, 'HH:MM:SS')]);
tic

scanMsgArray = cell(maxIterations, 2); % Store message and timestamps
for i = 1:maxIterations
    scanMsg = receive(sub, 10);
    scanMsgArray{i, 1} = scanMsg; % Store scan
    scanMsgArray{i, 2} = posixtime(datetime(now, 'ConvertFrom', 'datenum')); % Store timestamp
    pause(0.2);
end

toc;
disp("^^^ Storage Time");

tic;
% Main loop to process scans
for i = 1:maxIterations
    scanMsg = scanMsgArray{i, 1};
    timestamp = scanMsgArray{i, 2}; % Extract timestamp
    ranges = double(scanMsg.Ranges);
    numAngles = numel(ranges);
    angles = linspace(double(scanMsg.AngleMin), double(scanMsg.AngleMax), numAngles);

    % Create the lidarScan object
    scan = lidarScan(ranges, angles);

    % Add the scan to the SLAM algorithm
    [isAccepted, ~, ~] = addScan(slamAlg, scan);

    % Extract scans and poses
    [rawScans, rawPoses] = scansAndPoses(slamAlg);

    % Store the entire pose set plus the current iteration's timestamp
    posesArray{i} = [rawPoses, repmat(timestamp, size(rawPoses, 1), 1)];

    % Get current pose (just the i-th row, though you may adapt how you select this)
    currentPose = rawPoses(i, :);  % [x, y, theta]

    % Transform the local scan to the world frame for comparison
    scan = transformScan(rawScans{i}, currentPose);

    % Store raw points with timestamp
    rawPointsArray{i} = {scan.Cartesian, timestamp, currentPose}; % <--- Now also store the robot pose
end
toc;
disp("^^^ Data Collection Complete!");

tic
% Build the SLAM map
[scans, poses] = scansAndPoses(slamAlg);
slamTimestamps = repmat(scanMsgArray{1, 2}, size(poses, 1), 1);
slamMap = buildMap(scans, poses, mapResolution, maxLidarRange);

% Tracking parameters
trackingThreshold = 0.4;
maxFramesNoUpdate = 3;
nextObjectID = 1;
confirmationThreshold = 4;

% Initialize tracking structures
% We will store each trackedObject as:
%   {ID, Position, FramesNoUpdate, ConfirmationCount, Confirmed, Timestamp, RobotPose}
trackedObjects = {};

% And trackedHistory as:
%   {ID, Positions, Timestamps, RobotPoses}
trackedHistory = {};

% Post-processing loop
for i = 1:maxIterations
    % Create occupancy map for raw points
    rawPointsMap = binaryOccupancyMap(slamMap.XWorldLimits(2) - slamMap.XWorldLimits(1), ...
                                      slamMap.YWorldLimits(2) - slamMap.YWorldLimits(1), ...
                                      slamMap.Resolution);

    rawPointsMap.GridLocationInWorld = slamMap.GridLocationInWorld;

    % rawPointsArray{i}{1} = pointCloud, rawPointsArray{i}{2} = timestamp, rawPointsArray{i}{3} = currentPose
    setOccupancy(rawPointsMap, rawPointsArray{i}{1}, 1); % Use raw points

    % Convert maps to matrices
    rawMatrix = occupancyMatrix(rawPointsMap);
    slamMatrix = occupancyMatrix(slamMap);

    rawMatrix = flipud(rawMatrix);
    slamMatrix = flipud(slamMatrix);

    % Adjust matrix sizes
    [rawMatrix, slamMatrix] = adjustMatrixSizes(rawMatrix, slamMatrix);

    % Compute difference matrix
    diffMatrix = rawMatrix - slamMatrix;

    % Axes limits in meters
    xLimits = linspace(slamMap.XWorldLimits(1), slamMap.XWorldLimits(2), size(diffMatrix, 2));
    yLimits = linspace(slamMap.YWorldLimits(1), slamMap.YWorldLimits(2), size(diffMatrix, 1));

    % Filter noise
    threshold = 0.8;
    neighborThreshold = 4;
    filteredImg = filterYellowNoise(diffMatrix, threshold, neighborThreshold);

    % Detect clusters
    centers = detectClustersThresholdNoFig(filteredImg, threshold, diffMatrix, xLimits, yLimits);

    % Retrieve timestamp and robot pose from storage
    currentTimestamp = rawPointsArray{i}{2};
    currentPose = rawPointsArray{i}{3}; % [x, y, theta]

    % Update tracking with timestamps and pose
    [trackedObjects, trackedHistory, nextObjectID] = updateTrackingWithTimestamps( ...
        trackedObjects, centers, trackingThreshold, maxFramesNoUpdate, ...
        trackedHistory, nextObjectID, confirmationThreshold, currentTimestamp, currentPose);
end

disp("Tracking complete!");

% Display tracked history to console
disp('Tracked Object History (Raw Timestamps):');
for i = 1:size(trackedHistory, 1)
    objectID = trackedHistory{i, 1};
    positions = trackedHistory{i, 2};
    timestamps = trackedHistory{i, 3};
    posesAtDetection = trackedHistory{i, 4};

    fprintf('Object ID: %d\n', objectID);
    disp('Positions / Timestamps / RobotPose:');
    for j = 1:size(positions, 1)
        fprintf('   Position: [%.4f, %.4f], Timestamp: %.6f, RobotPose: [%.4f, %.4f, %.4f]\n', ...
            positions(j,1), positions(j,2), timestamps(j), ...
            posesAtDetection(j,1), posesAtDetection(j,2), posesAtDetection(j,3));
    end
end

% Display tracked history with human-readable timestamps
disp('Tracked Object History (Human-readable times):');
for i = 1:size(trackedHistory, 1)
    objectID = trackedHistory{i, 1};
    positions = trackedHistory{i, 2};
    timestamps = trackedHistory{i, 3};
    posesAtDetection = trackedHistory{i, 4};

    % Convert UNIX timestamps to datetime
    humanReadableTime = datetime(timestamps, 'ConvertFrom', 'posixtime', 'TimeZone', 'UTC');

    fprintf('Object ID: %d\n', objectID);
    disp('Positions / Times / RobotPose:');
    for j = 1:size(positions, 1)
        fprintf('   Position: [%.4f, %.4f], Timestamp: %s, Pos: [%.4f, %.4f, %.4f]\n', ...
            positions(j,1), positions(j,2), string(humanReadableTime(j)), ...
            posesAtDetection(j,1), posesAtDetection(j,2), posesAtDetection(j,3));
    end
end

% Specify the output CSV file
outputFile = 'LIDAR.csv';

% Open the file for writing
fid = fopen(outputFile, 'w');
if fid == -1
    error('Could not open the file for writing.');
end

% Write header row (including robot pose)
fprintf(fid, 'ObjectID,PositionX,PositionY,Timestamp, X,Y,Theta\n');

% Write tracked history to the CSV file
for i = 1:size(trackedHistory, 1)
    objectID = trackedHistory{i, 1};
    positions = trackedHistory{i, 2};
    timestamps = trackedHistory{i, 3};
    posesAtDetection = trackedHistory{i, 4};

    for j = 1:size(positions, 1)
        fprintf(fid, '%d,%.4f,%.4f,%.6f,%.4f,%.4f,%.4f\n', ...
            objectID, ...
            positions(j,1), positions(j,2), ...
            timestamps(j), ...
            posesAtDetection(j,1), ...
            posesAtDetection(j,2), ...
            posesAtDetection(j,3));
    end
end

fclose(fid);

disp(['Tracked history written to CSV file: ', outputFile]);

function [adjustedA, adjustedB] = adjustMatrixSizes(A, B)
    % Convert matrices to double to handle NaN padding
    A = double(A);
    B = double(B);
    % Get sizes
    sizeA = size(A);
    sizeB = size(B);
    % Determine the maximum size
    maxSize = max(sizeA, sizeB);
    % Pad arrays with NaN to match the maximum size
    adjustedA = padarray(A, maxSize - sizeA, NaN, 'post');
    adjustedB = padarray(B, maxSize - sizeB, NaN, 'post');
end

function filteredImg = filterYellowNoise(imgArray, threshold, minClusterSize)
    % Input:
    %   imgArray - Input array with values between -1 and 1
    %   threshold - Threshold value to consider a cell as yellow (e.g., 0.8)
    %   minClusterSize - Minimum number of pixels for a cluster to be retained
    % Output:
    %   filteredImg - Processed image array with isolated noise removed

    % Step 1: Create a binary mask for values greater than the threshold
    BW = imgArray > threshold;
    for t = 1 : 5
        [rows, cols, ~] = size(BW);
        for i = 2:rows-1 % start at 2 to avoid out of bounds error
            for j = 2:cols-1 % start at 2 to avoid out of bounds error
                if BW(i,j) == 0 % if pixel is black
                    % checks 8 nearest neighbours
                    cnt = BW(i-1,j-1) + BW(i-1,j) + BW(i-1,j+1) +...
                          BW(i,j-1) + BW(i,j+1) + BW(i+1,j-1) + BW(i+1,j) + BW(i+1, j+1);
                    if cnt > 5 % if 5 or more of these pixels are white fills in the pixel as white
                        BW(i,j) = 1;
                    end
                end
            end
        end
    end

    % Step 2: Identify connected components (clusters)
    CC = bwconncomp(BW); % Get connected components

    % Step 3: Filter out small clusters based on minClusterSize
    clusterSizes = cellfun(@numel, CC.PixelIdxList); 
    validClusters = clusterSizes >= minClusterSize; 

    % Create a filtered binary mask with only valid clusters
    filteredBW = false(size(BW));
    for k = 1:CC.NumObjects
        if validClusters(k)
            filteredBW(CC.PixelIdxList{k}) = true;
        end
    end

    % Step 4: Replace non-cluster pixels with the original background value
    filteredImg = imgArray; 
    filteredImg(~filteredBW) = -1; 
end

function centers = detectClustersThresholdNoFig(imgArray, threshold, diffMatrix, xLimits, yLimits)
    BW = imgArray > threshold;
    CC = bwconncomp(BW);
    stats = regionprops(CC, 'Centroid');
    centers = [];
    % No figure creation or plotting here
    for k = 1:length(stats)
        centroid = stats(k).Centroid;
        xCenter = xLimits(1) + (centroid(1) - 1) * (xLimits(end) - xLimits(1)) / (size(diffMatrix, 2) - 1);
        yCenter = yLimits(1) + (centroid(2) - 1) * (yLimits(end) - yLimits(1)) / (size(diffMatrix, 1) - 1);
        centers = [centers; xCenter, yCenter];
    end
end

function [trackedObjects, trackedHistory, nextObjectID] = updateTrackingWithTimestamps( ...
    trackedObjects, centers, trackingThreshold, maxFramesNoUpdate, ...
    trackedHistory, nextObjectID, confirmationThreshold, timestamp, robotPose)
% This function tracks objects and also stores the robot's SLAM pose at the time.
% The format for each entry in trackedObjects is:
%       {ID, Position, FramesNoUpdate, ConfirmationCount, Confirmed, Timestamp, RobotPose}
%
% The format for each entry in trackedHistory is:
%       {ID, Positions, Timestamps, RobotPoses}

    % === Ensure all rows in trackedObjects have 7 fields ===
    if ~isempty(trackedObjects)
        [nRows, nCols] = size(trackedObjects);
        if nCols < 7
            for idx = 1:nRows
                % Append default value for missing robotPose field
                trackedObjects{idx,7} = [NaN, NaN, NaN];
            end
        end
    end

    numTracks = size(trackedObjects, 1);
    numDetections = size(centers, 1);

    % Initialize the cost matrix
    costMatrix = zeros(numTracks, numDetections);
    for i = 1:numTracks
        for j = 1:numDetections
            costMatrix(i, j) = norm(trackedObjects{i, 2} - centers(j, :));
        end
    end

    costOfNonAssignment = trackingThreshold;
    [assignments, unassignedTracks, unassignedDetections] = assignDetectionsToTracks(costMatrix, costOfNonAssignment);

    updatedObjects = {};  % Will hold rows that have 7 columns each

    % === Update matched tracks ===
    for i = 1:size(assignments, 1)
        trackIdx = assignments(i, 1);
        detectionIdx = assignments(i, 2);

        % Update the track with the detection
        trackedObjects{trackIdx, 2} = centers(detectionIdx, :);  % new position
        trackedObjects{trackIdx, 3} = 0;                         % reset FramesNoUpdate counter
        trackedObjects{trackIdx, 4} = trackedObjects{trackIdx, 4} + 1;  % increment confirmation count

        % Confirm object if confirmation threshold is met
        if trackedObjects{trackIdx, 4} >= confirmationThreshold
            trackedObjects{trackIdx, 5} = true;  % Confirm the object
        end

        % Update timestamp and robotPose for this track
        trackedObjects{trackIdx, 6} = timestamp;
        trackedObjects{trackIdx, 7} = robotPose;

        % Add this detection to trackedHistory if the object is confirmed
        if trackedObjects{trackIdx, 5}
            thisID = trackedObjects{trackIdx, 1};
            thisPos = centers(detectionIdx, :);

            if isempty(trackedHistory)
                % Initialize trackedHistory if empty
                trackedHistory = {thisID, thisPos, timestamp, robotPose};
            else
                % Look for an entry for this object
                existingIDs = cell2mat(trackedHistory(:, 1));
                historyIndex = find(existingIDs == thisID, 1);
                if isempty(historyIndex)
                    trackedHistory = [trackedHistory; {thisID, thisPos, timestamp, robotPose}];
                else
                    trackedHistory{historyIndex, 2} = [trackedHistory{historyIndex, 2}; centers(detectionIdx, :)];
                    trackedHistory{historyIndex, 3} = [trackedHistory{historyIndex, 3}; timestamp];
                    trackedHistory{historyIndex, 4} = [trackedHistory{historyIndex, 4}; robotPose];
                end
            end
        end

        % Add the updated track (row is 1x7)
        updatedObjects = [updatedObjects; trackedObjects(trackIdx, :)];
    end

    % === Increment no-update counter for unmatched tracks ===
    for i = 1:length(unassignedTracks)
        trackIdx = unassignedTracks(i);
        trackedObjects{trackIdx, 3} = trackedObjects{trackIdx, 3} + 1;  % Increment counter
        updatedObjects = [updatedObjects; trackedObjects(trackIdx, :)];
    end

    % === Remove tracks that have not been updated for too long ===
    if ~isempty(updatedObjects)
        % cell2mat(updatedObjects(:,3)) converts the third field in every row to a numeric array
        updatedObjects = updatedObjects(cell2mat(updatedObjects(:, 3)) < maxFramesNoUpdate, :);
    end

    % === Create new tracks for unmatched detections ===
    for i = 1:length(unassignedDetections)
        detectionIdx = unassignedDetections(i);
        newObject = {nextObjectID, centers(detectionIdx, :), 0, 1, false, timestamp, robotPose}; 
        updatedObjects = [updatedObjects; newObject];
        nextObjectID = nextObjectID + 1;
    end

    trackedObjects = updatedObjects;
end
